usage_error() {
  echo "usage: [OPTION]... <suite> <target> [<mirror>]"
  echo "Try \`$PROGNAME --help' for more information."
  die "$@"
}

trace () {
    if [ -n "$DEBUG" ]; then
        echo "$PROGNAME: debug: $*" >&2
    fi
}

warn () {
    echo "$PROGNAME: warning: $*" >&2
}

die () {
    echo "$PROGNAME: critical error: $*" >&2
    cleanup_env
    exit 1
}

get_rpms() {
    # Takes array of rpms to obtain
    local verbose="-q"
    if [ -n "$DEBUG" ]; then
        verbose=""
    fi

    PKG_DIR=$TMP_DIR

    if [ -n "$LOCAL_SOURCE" ]; then
        trace "get_rpms(): Using $LOCAL_SOURCE for RPMS"
        for a in $@
        do
            if [ ! -f "$LOCAL_SOURCE/$a" ]; then
                die "$a not found at $LOCAL_SOURCE"
            fi
        done
        PKG_DIR=$LOCAL_SOURCE
        KEEP_TMP="yes"
    else
        trace "get_rpms(): Getting RPMS from $MIRROR"
        setup_env
        cd $TMP_DIR
        for a in $@
        do
            wget $verbose ${MIRROR%/}/$a
        done
        cd $PWD
        if [ -n "$DOWNLOAD_ONLY" ]; then
            mv $TMP_DIR $TARGET
        fi
    fi
}

get_rpms_fuzzy() {
    # Takes array of rpms to obtain
    setup_env
    cd $TMP_DIR
    local verbose="-q"
    if [ -n "$DEBUG" ]; then
        verbose=""
    fi
    
    for a in $@
    do
        wget $verbose -v -r -nH -nd --no-parent -l inf -A ""$a-*"" $RPM_URL
    done
    cd $PWD
    if [ -n "$DOWNLOAD_ONLY" ]; then
        mv $TMP_DIR $TARGET
    fi

}

find_best_mirror() {
    # Given a list of mirrors, run through them finding
    # the "best" one
    #
    # XXX: FIXME
    # It would be way cool to be able to store this information
    # site-wide (/etc/rpmstrap or some such whatever) so you could
    # run it once (or from a cron or whatever) and it would store
    # its findings there for default usage. This is because, as
    # it stands right now, finding the best mirror will probably
    # take longer than it would just to use any single mirror.
    # i.e., this function is worthless... but it has potential
    # XXX
    #
    local lowtimepass=99999999999999999999999999
    local lowurl=""
    for a in $@
    do
        if [ "$lowurl" = "" ]; then
            lowurl=$a
        fi
        timepass=$(/usr/bin/time -f "%e" --quiet wget -q -c -T 1 --connect-timeout=.5 $a --read-timeout=.5 2>&1)
        setup_env
        cd $TMP_DIR
        if [ $(echo "$timepass < $lowtimepass" | bc -l) ]; then
            lowtimepass=$timepass
            lowurl=$a
        fi
    done
    BEST_MIRROR=$lowurl
}

setup_env() {
    if [ -e "$TARGET" ]; then
        die "chroot directory $TARGET already exists; aborting"
    fi
    cleanup_env
    mkdir -p $TMP_DIR
}

cleanup_env() {
    rm -fr $TMP_DIR
}